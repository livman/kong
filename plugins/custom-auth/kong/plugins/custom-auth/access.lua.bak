local _M = { conf = {} }
local http = require "resty.http"
local pl_stringx = require "pl.stringx"
local cjson = require "cjson.safe"

local jwt = require "resty.jwt"
local inspect = require('inspect')

local emptyJson = "{}"

function _M.error_response(res_body, status)
    ngx.header['Content-Type'] = 'application/json'
    ngx.status = status
    ngx.say(res_body)
    ngx.exit(status)
end

function _M.success_response(res_body, status)
    ngx.header['Content-Type'] = 'application/json'
    ngx.status = status
    ngx.say(res_body)
    ngx.exit(status)
end

function _M.response(res_body, status)
    ngx.header['Content-Type'] = 'application/json'
    ngx.status = status
    ngx.say(res_body)
    ngx.exit(status)
end

function split(s, delimiter)
    local result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function _M.verify_access_token(access_token, config)
    print("access token : " .. access_token)
    --local key = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAk9HBsVNzDO0nwbCzqXvqTjOKU0MQqn/E3pHt4COhtzoFnOzZHd1Chd+/df45OBn9Obrug/zAXoZxmaq1vKf0q62E8xSt/u5siaShD1+Nw4UQVyB3L7pvunDkIv3LdEG0ML9wK+U+K002mPQIcrX/oEC80HNSKhGXoQ84D+/fB5K/zcgJG733lr1GnFTelfzTal8YNUl60NhDBd2UhZQY/Pg8tUPr42cvACi5Ld8vdKBISLnfYgN7SN2mrRk6xPZc+cchWcVWx2ZGWpk3DF4y6QsYGFFWyQCH7f43qWQnBguJ2EyIfcIVtG91kObVtsrWpHzJ0DPT5mT2ZKoCCyjwVQIDAQAB\n-----END PUBLIC KEY-----"
    local key = "-----BEGIN PUBLIC KEY-----\n".. config.keycloakPubKey .."\n-----END PUBLIC KEY-----"
    local jwt_obj = jwt:verify(key, access_token)
    kong.log.inspect("jwt_obj: ", jwt_obj)
    kong.log.inspect("verified: ", jwt_obj.verified)
    jwt_obj.userId = jwt_obj.payload.sub
    return jwt_obj
end

function _M.getDiffTimeMs(startTime)
    return (os.clock() - startTime) * 1000
end

function _M.authenticate(username, password, config)
    local startTime = os.clock()
    kong.log.inspect("start_time: ", start_time)

    local httpc = http:new()

    kong.log.inspect("username: ", username)
    kong.log.inspect("password: ", password)

    if username == nil or password == nil then
        local response_data = '{"code": 400, "data": {"message": "Missing parameter"}}'
        _M.response(response_data, res.status)
    end
    
    local param = "client_id=".. config.keycloakClientId .."&grant_type=password&client_secret=".. config.keycloakClientSecret .."&scope=openid&username=".. username .."&password=".. password
    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/realms/".. config.keycloakRealms .."/protocol/openid-connect/token", {
        method = "POST",
        ssl_verify = false,
        body = param,
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
        }
    })
    local res_data = cjson.decode(res.body)
    
    kong.log.inspect("response authen: ", res.status)

    local response_data = '{"code": ' .. res.status .. ',"data": '.. emptyJson ..'}'

    kong.log.inspect(string.format("elapsed_time authen: %.2fms", _M.getDiffTimeMs(startTime)))

    if res.status == 200 then
        kong.log.inspect("in condition ", "yes")
        response_data = '{"code": ' .. res.status .. ',"data":' .. res.body .. '}'   
    end
    

    _M.response(response_data, res.status)
end

function _M.refreshToken(refreshToken, config)
    local httpc = http:new()
    
    local param = "client_id=".. config.keycloakClientId .."&grant_type=refresh_token&client_secret=".. config.keycloakClientSecret .."&refresh_token=".. refreshToken
    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/realms/".. config.keycloakRealms .."/protocol/openid-connect/token", {
        method = "POST",
        ssl_verify = false,
        body = param,
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
        }
    })
    local res_data = cjson.decode(res.body)
    

    kong.log.inspect("response refresh: ", res_data)

    local response_data = '{"code": ' .. res.status .. ',"data": '.. emptyJson ..'}'

    if res.status == 200 then
        kong.log.inspect("in condition ", "yes")
        response_data = '{"code": ' .. res.status .. ',"data":' .. res.body .. '}'   
    end
    
    _M.response(response_data, res.status)

end

function _M.validateToken(accessToken, config)
    local startTime = os.clock()

    local httpc = http:new()
    
    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/realms/".. config.keycloakRealms .."/protocol/openid-connect/userinfo", {
        method = "GET",
        ssl_verify = false,
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
            ["Authorization"] = "Bearer ".. accessToken,
        }
    })
    local res_data = cjson.decode(res.body)
    
    kong.log.inspect("response validate token: ", res_data)

    kong.log.inspect(string.format("validateToken keycloak: %.2fms", _M.getDiffTimeMs(startTime)))

    if not res_data then
        local response_data = '{"code": ' .. res.status .. ',"data": '.. emptyJson ..'}' 
        _M.response(response_data, res.status)
    end
    
    res_data.verified = true
    res_data.userId = res_data.sub

    return res_data
end

function _M.getAdminToken(config)
    local httpc = http:new()
    
    local param = "client_id=admin-cli&grant_type=password&username=".. config.keycloakAdminUser .."&password=".. config.keycloakAdminPassword
    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/realms/master/protocol/openid-connect/token", {
        method = "POST",
        ssl_verify = false,
        body = param,
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
        }
    })

    local res_data = cjson.decode(res.body)

    kong.log.inspect("get admin token: ", res_data)

    if res_data.access_token then
        return res_data.access_token
    end

    return nil
end

function _M.createUser(reqBody, config)
    kong.log.inspect("createUser in function")
    local startTime = os.clock()
    local startTimeAll = os.clock()
    local accessTokenAdmin = _M.getAdminToken(config)

    kong.log.inspect(string.format("getAdminToken: %.2fms", _M.getDiffTimeMs(startTime)))

    --kong.log("accessTokenAdmin: ", accessTokenAdmin)

    local httpc = http:new()

    --kong.log("tenant-id from header: ", ngx.req.get_headers()["tenant-id"])

    --reqBody.tenantId = ngx.req.get_headers()["tenant-id"]

    if not reqBody.email then
        reqBody.email = reqBody.username
    end

    --local bodyParam = '{"username": "'.. reqBody.username ..'", "firstName":"'.. reqBody.firstName ..'", "lastName":"'.. reqBody.lastName ..'", "email":"'.. reqBody.email ..'", "enabled": "true", "attributes": {"tenantId": "'.. reqBody.tenantId ..'"}, "credentials":[{"type":"password", "value":"'.. reqBody.password ..'", "temporary":false}]}'
    
    local bodyParam = '{"username": "'.. reqBody.username ..'", "firstName":"'.. reqBody.firstName ..'", "lastName":"'.. reqBody.lastName ..'", "email":"'.. reqBody.email ..'", "enabled": "true", "credentials":[{"type":"password", "value":"'.. reqBody.password ..'", "temporary":false}]}'

    kong.log.inspect("bodyParam: ", bodyParam)

    startTime = os.clock()

    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/admin/realms/".. config.keycloakRealms .."/users", {
        method = "POST",
        ssl_verify = false,
        body = bodyParam,
        headers = {
            ["Content-Type"] = "application/json",
            ["Authorization"] = "Bearer ".. accessTokenAdmin,
        }
    })

    kong.log.inspect("res create user:", res)
    
    kong.log.inspect(string.format("call create user keycloak: %.2fms", _M.getDiffTimeMs(startTime)))


    kong.log.inspect("create user: ", res_data)

    kong.log.inspect(string.format("create user time: %.2fms", _M.getDiffTimeMs(startTimeAll)))

    if res.status ~= 201 then
        kong.log.inspect("can not create user: ", "yes")
        local response_data = '{"code": ' .. res.status .. ',"data":' .. res.body .. '}' 
        _M.response(response_data, res.status)
    end

    kong.log.inspect("link redirect: ", res.headers.Location)
    
    local tmp = split(res.headers.Location, "/")

    reqBody.password = nil
    reqBody.cfPassword = nil
    reqBody.userId = tmp[9]
    
    -- modify json body to upstream
    local ok, err = kong.service.request.set_body(reqBody)
    
end

function _M.searchUser(reqBody, accessTokenAdmin, config)

    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/admin/realms/".. config.keycloakRealms .."/users?briefRepresentation=true&first=0&max=20&search=", {
        method = "GET",
        ssl_verify = false,
        headers = {
            ["Content-Type"] = "application/json",
            ["Authorization"] = "Bearer ".. accessTokenAdmin,
        }
    })

end

function _M.resetPassword(reqBody, accessTokenAdmin, config)

    kong.log("accessTokenAdmin: ", accessTokenAdmin)

    local httpc = http:new()

    local bodyParam = '{"type": "password", "value":"'.. reqBody.password ..'", "temporary": "false"}'
    
    kong.log.inspect("bodyParam: ", bodyParam)

    local res, err = httpc:request_uri(config.keycloakEndpoint .."/auth/admin/realms/".. config.keycloakRealms .."/users/id/reset-password", {
        method = "PUT",
        ssl_verify = false,
        body = bodyParam,
        headers = {
            ["Content-Type"] = "application/json",
            ["Authorization"] = "Bearer ".. accessTokenAdmin,
        }
    })
    local res_data = cjson.decode(res.body)
end

function _M.authen(conf)
    _M.conf = conf
    local reqBody = _M.getJsonBody(_M.conf)
    local res = nil
    kong.log.inspect("username: ", reqBody.username)
    res = _M.authenticate(reqBody.username, reqBody.password, _M.conf)
end

function _M.getJsonBody(conf)
    ngx.req.read_body()
    local body_json = ngx.req.get_body_data()
    if body_json == nil then
        local response_data = '{"message": "Requred data"}'
        _M.response(response_data, 400)
    end
    kong.log.inspect("json body req: ", body_json)
    local reqBody = cjson.decode(body_json)
    return reqBody
end

function _M.routeFilter(conf)
    _M.conf = conf
    -- verfiy auth
    local access_token = ngx.req.get_headers()["Authorization"]
    if not access_token then
        local response_data = '{"code": '.. ngx.HTTP_UNAUTHORIZED ..',"data": {}}'
        _M.response(response_data, ngx.HTTP_UNAUTHORIZED)
    end

    kong.log.inspect("acccess token from req: ", access_token)

    local token = split(access_token, " ")

    local res = nil

    if _M.conf.selfVerifyToken then
        res = _M.verify_access_token(token[2], _M.conf)
    else
        res = _M.validateToken(token[2], _M.conf)
    end

    if res.verified ~= true then
        local response_data = '{"code": '.. ngx.HTTP_UNAUTHORIZED ..',"data": {}}'
        _M.response(response_data, ngx.HTTP_UNAUTHORIZED)
    end

    ngx.req.clear_header("Authorization")
    ngx.req.set_header("user-id", res.userId)
    --ngx.req.set_header("tenantId", _M.conf.keycloakTenantId)

    --kong.service.request.clear_header("Authorization")
    --kong.service.request.set_header("User-Id", res.userId)
end

function _M.userManipulate(conf)
    _M.conf = conf
    

    local res = nil

    if ngx.var.uri == _M.conf.userServiceEndpoint .."/refresh" then
        local reqBody = _M.getJsonBody(_M.conf)
        res = _M.refreshToken(reqBody.refreshToken, _M.conf)
    elseif ngx.var.uri == _M.conf.userServiceEndpoint .."/createUser" then
        local reqBody = _M.getJsonBody(_M.conf)
        kong.log.inspect("create user fn true")
        if reqBody.password ~= reqBody.cfPassword then
            local response_data = '{"message": "A password mismatch"}'
            _M.response(response_data, 400)
        end
        res = _M.createUser(reqBody, _M.conf)
    else
        local response_data = '{"message": "no Route matched with those values"}'
        _M.response(response_data, 404)
    end
end

return _M